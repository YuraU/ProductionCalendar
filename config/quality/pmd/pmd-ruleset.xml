<?xml version="1.0"?>

<!-- Custom PMD config-->
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Android Application Rules"
    xmlns="http://pmd.sf.net/ruleset/1.0.0"
    xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
    xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>Custom ruleset for ribot Android application</description>

    <exclude-pattern>.*/R.java</exclude-pattern>
    <exclude-pattern>.*/gen/.*</exclude-pattern>

    <rule ref="rulesets/java/android.xml" />
    <rule ref="rulesets/java/clone.xml" />
    <rule ref="rulesets/java/finalizers.xml" />
    <rule ref="rulesets/java/imports.xml">
        <!-- Espresso is designed this way !-->
        <exclude name="TooManyStaticImports" />
    </rule>
    <rule ref="rulesets/java/logging-java.xml">
        <!-- This rule wasn't working properly and given errors in every var call info -->
        <exclude name="GuardLogStatementJavaUtil" />
    </rule>
    <rule ref="rulesets/java/braces.xml">
        <!-- We allow single line if's without braces -->
        <exclude name="IfStmtsMustUseBraces" />
    </rule>
    <rule ref="rulesets/java/strings.xml" >
        <!-- Exclude because causes problems with SQL Strings that usually require duplication -->
        <exclude name="AvoidDuplicateLiterals"/>
    </rule>
    <rule ref="rulesets/java/basic.xml" />
    <rule ref="rulesets/java/naming.xml">
        <exclude name="AbstractNaming" />
        <exclude name="LongVariable" />
        <exclude name="ShortMethodName" />
        <exclude name="ShortVariable" />
        <exclude name="ShortClassName" />
        <exclude name="VariableNamingConventions" />
    </rule>

    <rule ref="rulesets/java/codesize.xml">
        <!--Rule disabled - We don't care about this metric-->
        <exclude name="NPathComplexity"/>
        <!--Rule disabled - We don't care about this metric-->
        <exclude name="CyclomaticComplexity"/>
        <!--Rule disabled - We don't care about this metric-->
        <exclude name="ModifiedCyclomaticComplexity"/>
        <!--Rule disabled - We don't care about this metric-->
        <exclude name="StdCyclomaticComplexity"/>
    </rule>

    <rule ref="rulesets/java/comments.xml">
        <exclude name="CommentRequired" />
        <exclude name="CommentSize" />
        <exclude name="CommentDefaultAccessModifier" />
    </rule>
    <rule ref="rulesets/java/comments.xml/CommentSize">
        <properties>
            <property name="maxLines"      value="200"/>
            <property name="maxLineLength" value="256"/>
        </properties>
    </rule>

    <rule ref="rulesets/java/controversial.xml">
        <!--Rule disabled - We don't want to call super(); in all constructors-->
        <exclude name="CallSuperInConstructor"/>
        <!--Rule disabled - This always asks for a concurrent HashMap, there is no need to always use that.-->
        <exclude name="UseConcurrentHashMap"/>
        <!--Rule disabled - We are allowing package private declarations in the project.-->
        <exclude name="DefaultPackage"/>
        <!--Rule disabled - When we pass null to methods we tend to assign a variable first to explain the null passed.-->
        <exclude name="NullAssignment"/>
        <!--Rule disabled - Most of our local variables are final; final is actually enforced in project-->
        <exclude name="AvoidFinalLocalVariable"/>
        <!--Rule disabled - This is too strict, won't even let us use zeros.-->
        <exclude name="AvoidLiteralsInIfCondition"/>
        <!--Rule disabled - We can have as many returns as we want.-->
        <exclude name="OnlyOneReturn"/>
        <!--Rule disabled - Weird rule, not using it.-->
        <exclude name="DataflowAnomalyAnalysis"/>
        <!--Rule disabled - We are prefixing parameters with "in" and "out" at will.-->
        <exclude name="AvoidPrefixingMethodParameters"/>
        <!--Rule disabled - We are using 'volatile' keyword in the project. Nothing wrong with that.-->
        <exclude name="AvoidUsingVolatile"/>
        <!--Rule disabled - We don't want to declare a constructor always.-->
        <exclude name="AtLeastOneConstructor"/>
    </rule>

    <rule ref="rulesets/java/coupling.xml">
        <exclude name="ExcessiveImports" />
        <exclude name="LawOfDemeter" />
        <exclude name="LoosePackageCoupling" />
    </rule>

    <rule ref="rulesets/java/design.xml">
        <exclude name="AvoidReassigningParameters" />
        <!-- if (x != y) { short code block } else { long code block } -->
        <exclude name="ConfusingTernary" />
        <exclude name="SwitchStmtsShouldHaveDefault" />
        <!-- Android listeners contain a lot of such switch statements -->
        <exclude name="TooFewBranchesForASwitchStatement" />
    </rule>

    <rule ref="rulesets/java/empty.xml" />

    <rule ref="rulesets/java/junit.xml" />

    <rule ref="rulesets/java/logging-jakarta-commons.xml">
        <exclude name="GuardLogStatement" />
    </rule>

    <rule ref="rulesets/java/migrating.xml" />

    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="AvoidInstantiatingObjectsInLoops" />
        <exclude name="LocalVariableCouldBeFinal" />
        <exclude name="MethodArgumentCouldBeFinal" />
    </rule>

    <rule ref="rulesets/java/strictexception.xml" />

    <rule ref="rulesets/java/typeresolution.xml">
        <exclude name="LooseCoupling" />
    </rule>

    <rule ref="rulesets/java/unnecessary.xml" />

    <rule ref="rulesets/java/unusedcode.xml" />

    <!--custom rules-->
    <!--If we reach 50 methods then this class is probably massive and needs to be refactored.-->
    <rule ref="rulesets/java/codesize.xml/TooManyMethods">
        <properties>
            <property name="maxmethods" value="50"/>
        </properties>
    </rule>
    <!--If we reach 18 class fields then this class is probably massive and needs to be refactored.-->
    <rule ref="rulesets/java/codesize.xml/TooManyFields">
        <properties>
            <property name="maxfields" value="18"/>
        </properties>
    </rule>
    <!--If we reach 50 public methods/attributes then this class is probably massive and needs to be refactored.-->
    <rule ref="rulesets/java/codesize.xml/ExcessivePublicCount">
        <properties>
            <property name="minimum" value="50"/>
        </properties>
    </rule>
</ruleset>